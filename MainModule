MODULE MainModule
	CONST robtarget startPos:=[[378.22,-64.84,103.93],[0.000155952,1,0.000207079,-0.00039833],[-1,-1,0,1],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget r_Kleurmeetpunt:=[[261.01,367.86,154.36],[0.000158003,1,5.62801E-05,0.000424798],[0,0,-1,1],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];

    ! grid spacing
    CONST num offset_x := 70;
    CONST num offset_y := 65;
    
    ! block heights to validate
    CONST num offset_z_58 := -6; ! 58mm block
    CONST num offset_z_54 := -10; ! 54mm block
    CONST num offset_z_50 := -14; ! 50mm block
    
    ! collected data during run
    PERS num blockColor{4,3}:=[[0,2,0], [0,4,1], [3,1,0], [1,0,3]];
    PERS num blockHeight{4,3}:=[[58,50,0], [0,54,54], [54,54,0], [50,0,54]];
    PERS num blockExists{4,3}:=[[1,1,0], [0,1,1], [1,1,0], [1,0,1]];
    
    ! data calculated at end
    PERS num validated := 8;
    PERS num rejected := 4;
    
    PERS num grayCount := 1;
    PERS num blueCount := 0;
    
    PERS num largeCount := 6;
    PERS num smallCount := 2;
    
    
    VAR string color;
    
    CONST speeddata speed := v200; ! standard travel speed
    CONST speeddata fineSpeed := v50; ! travel speed for delicate moves
    
	PROC main()
        reset_variables; ! reset persistent variables
		waitOnSetup;
        startProgram;
        FOR x FROM 1 TO 4 DO
            FOR y FROM 1 TO 3 DO
                grab x, y;
            ENDFOR
        ENDFOR
        validate;
	ENDPROC
    
    PROC reset_variables()
        grayCount := 0;
        blueCount := 0;
        
        validated := 0;
        rejected := 0;
        
        smallCount := 0;
        largeCount := 0;
        
        blockColor := [[0,0,0], [0,0,0], [0,0,0], [0,0,0]];
        blockHeight := [[0,0,0], [0,0,0], [0,0,0], [0,0,0]];
        blockExists := [[0,0,0], [0,0,0], [0,0,0], [0,0,0]];
    ENDPROC
    
    ! validated corrected data with requirements
    PROC validate()
        FOR x FROM 1 TO 4 DO
            FOR y FROM 1 TO 3 DO
                IF blockColor{x, y} = 3 OR blockColor{x, y} = 2 OR true THEN
                    IF blockHeight{x,y} >= 50 THEN
                        validated := validated + 1;
                        color := "";
                        colorMap blockColor{x, y}, color;
                        TPWrite "valid block with height: " + NumToStr(blockHeight{x,y}, 0) + " and color " + color;
                        
                        IF blockHeight{x,y} = 50 THEN
                            smallCount := smallCount + 1;
                        ELSE
                            largeCount:= largeCount + 1;
                        ENDIF
                    ELSE
                        rejected := rejected + 1;
                        TPWrite "Block height out of spec";
                    ENDIF
                    
                    IF blockColor{x, y} = 2 THEN
                        grayCount := grayCount + 1;
                    ELSEIF blockColor{x, y} = 2 THEN
                        blueCount := blueCount + 1;
                    ENDIF
                ELSE
                    color := "";
                    colorMap blockColor{x, y}, color;
                    TPWrite "Block color out of spec. color detected: " + color;
                ENDIF
            ENDFOR
        ENDFOR
        
        TPWrite "valid blocks: " + NumToStr(validated, 0);
    ENDPROC
    
    ! map color number to string representation
    PROC colorMap(num value, INOUT string color)
        IF value = 1 THEN
            color := "Rood";
        ELSEIF value = 2 THEN
            color := "Blauw";
        ELSEIF value = 3 THEN
            color := "Grijs";
        ELSE
            color := "Zwart";
        ENDIF
    ENDPROC

    PROC waitOnSetup()
        TPWrite "Setup blocks and enable switch to continue";
        WaitUntil(DI10_9_SW0 = 1);
    ENDPROC
    
    PROC startProgram()
        TPWrite "Enable second switch to start program";
        WaitUntil(DI10_10_SW1 = 1);
        MoveJ startPos, v100, z50, t_zuignap;
    ENDPROC
    
    PROC grab(num x, num y)
        ! Move above block
        MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, 0), speed, z50, t_zuignap;

        ! Move down to 58mm block
        MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, offset_z_58), fineSpeed, z50, t_zuignap;
        
        ! Attempt to grab
        SetDO DO_Ventiel_Vacuüm,1;
        WaitTime 2;
        
        
        IF DI_ManoMeter_Out1=1 THEN
            ! successfully grabbed, register block
            blockHeight{x,y} := 58;
            blockExists{x,y} := 1;
            SetDO DO_Ventiel_Vacuüm,0; ! turn of vacuum
            ! move back up to clear block
            MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, 0), speed, z50, t_zuignap;
            RETURN; ! end and continue with next block
        ENDIF

        ! failed to grab, move down to 54mm block height and turn on vacuum
        MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, offset_z_54), fineSpeed, z50, t_zuignap;
        SetDO DO_Ventiel_Vacuüm,1;
        WaitTime 2;
        
        IF DI_ManoMeter_Out1 = 1 THEN
            blockExists{x,y} := 1;
            blockHeight{x,y} := 54;
            measure_color x, y, offset_z_54;
            
            ! turn off suction
            SetDO DO_Ventiel_Vacuüm,0;
            
            ! move back up
            MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, 0), speed, z50, t_zuignap;
            RETURN; ! end and continue to next block
        ENDIF
        
        ! failed to grab, move down to 54mm block height and turn on vacuum
        MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, offset_z_50), fineSpeed, z50, t_zuignap;
        SetDO DO_Ventiel_Vacuüm,1;
        WaitTime 2;
        
        IF DI_ManoMeter_Out1 = 1 THEN
            blockExists{x,y} := 1;
            blockHeight{x,y} := 50;
            measure_color x, y, offset_z_50;
            
            ! turn off suction
            SetDO DO_Ventiel_Vacuüm,0;
            
            ! move back up
            MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, 0), speed, z50, t_zuignap;
            RETURN; ! end and continue to next block
        ENDIF
        
        ! no blocks grabbed
        blockHeight{x,y} := 0;
        blockExists{x,y} := 0;
        
        ! move back up
        MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, 0), speed, z50, t_zuignap;
    ENDPROC
    
    PROC measure_color(num x, num y, num offset)
        ! move up to clear other blocks
        MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, 70), fineSpeed, z50, t_zuignap;
        
        ! move to sensor
        MoveJ Offs(r_Kleurmeetpunt, 0, 0, 0), speed, z50, t_zuignap;
        WaitTime 3;
        
        ! read color sensor
        IF DI_Kleur_Sensor_Q1 = 1 THEN
            blockColor{x,y} := 1;
            TPWrite "Rood"; ! Rood
        ELSEIF DI_Kleur_Sensor_Q2 = 1 THEN
            blockColor{x,y} := 2;
            TPWrite "Blauw"; ! Grijs
        ELSEIF DI_Kleur_Sensor_Q3 = 1 THEN
            blockColor{x,y} := 3;
            TPWrite "Grijs"; ! Blauw
        ELSE
            blockColor{x,y} := 4;
            TPWrite "Zwart"; ! 
        ENDIF
        
        ! move block back to original position in the grid
        MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, 70), speed, z50, t_zuignap;
        
        ! move back down to original position
        MoveJ Offs(startPos, (x-1)*offset_x, (y-1)*offset_y, offset), speed, z50, t_zuignap;
        
        ! wait for movement to stop
        WaitTime 2;
    ENDPROC
ENDMODULE
